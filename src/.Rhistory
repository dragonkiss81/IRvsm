else if (is.character(.stopwords))
.stopwords <- function(x) x[is.na(match(x, control$stopwords))]
.stemming <- control$stemming
if (isTRUE(.stemming))
.stemming <- function(x) stemDocument(x, meta(doc, "language"))
or <- c("removePunctuation", "removeNumbers", "stopwords",
"stemming")
nc <- names(control)
n <- nc[nc %in% or]
for (name in sprintf(".%s", c(n, setdiff(or, n)))) {
g <- get(name)
if (is.function(g))
txt <- g(txt)
}
if (is.null(txt))
return(setNames(integer(0), character(0)))
dictionary <- control$dictionary
tab <- if (is.null(dictionary))
table(txt)
else table(factor(txt, levels = dictionary))
if (names(tab[1])=="") tab <- tab[-1]
bl <- control$bounds$local
if (length(bl) == 2L && is.numeric(bl))
tab <- tab[(tab >= bl[1]) & (tab <= bl[2])]
nc <- nchar(names(tab), type = "chars")
wl <- control$wordLengths
lb <- if (is.numeric(wl[1])) wl[1] else 3
ub <- if (is.numeric(wl[2])) wl[2] else Inf
tab <- tab[(nc >= lb) & (nc <= ub)]
storage.mode(tab) <- "integer"
class(tab) <- c("term_frequency", class(tab))
tab
}
## Useful for TermDocumentMatrix
TermDocumentMatrix_classes <-
c("TermDocumentMatrix", "simple_triplet_matrix")
## Useful for TermDocumentMatrix
.TermDocumentMatrix <-
function(x, weighting)
{
x <- as.simple_triplet_matrix(x)
if(!is.null(dimnames(x)))
names(dimnames(x)) <- c("Terms", "Docs")
class(x) <- TermDocumentMatrix_classes
## <NOTE>
## Note that if weighting is a weight function, it already needs to
## know whether we have a term-document or document-term matrix.
##
## Ideally we would require weighting to be a WeightFunction object
## or a character string of length 2.  But then
##   dtm <- DocumentTermMatrix(crude,
##                             control = list(weighting =
##                                            function(x)
##                                            weightTfIdf(x, normalize =
##                                                        FALSE),
##                                            stopwords = TRUE))
## in example("DocumentTermMatrix") fails [because weightTfIdf() is
## a weight function and not a weight function generator ...]
## Hence, for now, instead of
##   if(inherits(weighting, "WeightFunction"))
##      x <- weighting(x)
## use
if(is.function(weighting))
x <- weighting(x)
## and hope for the best ...
## </NOTE>
else if(is.character(weighting) && (length(weighting) == 2L))
attr(x, "weighting") <- weighting
else
stop("invalid weighting")
x
}
##  Modified command "TermDocumentMatrix" on package tm
##  and defined "TermDocumentMatrixCN"
TermDocumentMatrixCN<-
function (x, control = list())
{
stopifnot(is.list(control))
tflist <- lapply(unname(content(x)), termFreqCN, control)
tflist <- lapply(tflist, function(y) y[y > 0])
v <- unlist(tflist)
i <- names(v)
allTerms <- sort(unique(as.character(if (is.null(control$dictionary)) i else control$dictionary)))
i <- match(i, allTerms)
j <- rep(seq_along(x), sapply(tflist, length))
docs <- as.character(meta(x, "id", "local"))
if (length(docs) != length(x)) {
warning("invalid document identifiers")
docs <- NULL
}
m <- simple_triplet_matrix(i = i, j = j, v = as.numeric(v),
nrow = length(allTerms), ncol = length(x), dimnames = list(Terms = allTerms,
Docs = docs))
bg <- control$bounds$global
if (length(bg) == 2L && is.numeric(bg)) {
rs <- row_sums(m > 0)
m <- m[(rs >= bg[1]) & (rs <= bg[2]), ]
}
weighting <- control$weighting
if (is.null(weighting))
weighting <- weightTf
.TermDocumentMatrix(m, weighting)
}
######################################################################
tdm <- TermDocumentMatrixCN(docs)
tdm
head(tdm)
inspect(tdm)
inspect(docs)
plantcat_df
VectorSource(plantcat_df)
docs <- Corpus( t(VectorSource(plantcat_df)))
docs <- Corpus(VectorSource(plantcat_df))
docs
t(plantcat_df)
docs <- Corpus(VectorSource(t(plantcat_df)))
docs
inspect(docs)
docs <- Corpus(VectorSource(plantcat_df))
inspect(plantcat_df)
inspect(docs)
summary(docs)
summary(plantcat_df)
qview(plantcat_df)
plantcat_df[1,]
docs <- Corpus(VectorSource(plantcat_df[1,]))
summary(docs)
tdm <- TermDocumentMatrixCN(docs)
freq <- colSums(as.matrix(dtm))
length(freq)
summary(tdm)
inspect(tdm)
freq
tdm
tdm
inspect(tdm)
docs
print(xmltop)[1:2]
plantcat
docs <- Corpus(VectorSource(plantcat_df[2,]))
tdm <- TermDocumentMatrixCN(docs)
library("XML")
xmlfile <- xmlTreeParse("query-train.xml")
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
summary(plantcat_df)
library(tm)
docs <- Corpus(VectorSource(plantcat_df[2,]))
tdm <- TermDocumentMatrixCN(docs)
tdm
inspect(tdm)
tdm <- TermDocumentMatrixCN(docs,
control = list(removePunctuation = FALSE,
stopwords = FALSE))
tdm
inspect(tdm)
summary(plantcat_df)
plantcat_df[2,]
docs
docs
inspect("tdm")
inspect(docs)
docs#number
docs$number
docs$number
docs$nrow
docs#nrow
docs$number[1]
docs
docs <- Corpus(VectorSource(plantcat_df[2,]))
docs
tdm <- TermDocumentMatrixCN(docs)
tdm
inspect(tdm)
source('~/Desktop/IRvsm/src/twordparser.r')
install.packages("tm")
savehistory("~/Desktop/temp.txt")
docs <- Corpus(VectorSource(plantcat_df))
library("XML")
library("tm")
docs <- Corpus(VectorSource(plantcat_df))
docs
tdm <- TermDocumentMatrixCN(docs)
docs <- Corpus(VectorSource(plantcat_df))
setwd("~/Desktop/IRvsm/src")
install.packages("tm")
install.packages("slam")
install.packages("rJava")
# install.packages("tm")
# install.packages("slam")
# install.packages("rJava")
#
# install.packages("~/Downloads/tmcn_0.1-4.tar.gz", repos=NULL, type="source")
# install.packages("~/Downloads/Rwordseg_0.2-1.tar.gz", repos=NULL, type="source")
library("tm")
##  有關中文的套件: Rwordseg tmcn
##  用指令會有無法安裝的可能(滿常發生)
##  直接到 https://r-forge.r-project.org/R/?group_id=1571 及
##         https://r-forge.r-project.org/R/?group_id=1054 下載 .zip 檔
##  放入 R 的套件資料夾
##  注意:載入 Rwordseg 前需要先載入 rJava 套件
library("rJava")
library("Rwordseg")
library("tmcn")
library("slam")
######################################################################
##  Product TermDocumentMatrix for Chinese on R after version 3.0.2
##
##  Modified command "words" on package NLP
wordsCN<-function(x,...){
words<-unlist(segmentCN(x$content))
return(words)
}
##  Modified command "termFreq" on package tm
termFreqCN<-
function (doc, control = list())
{
stopifnot(inherits(doc, "TextDocument"), is.list(control))
.tokenize <- control$tokenize
if (is.null(.tokenize) || identical(.tokenize, "wordsCN"))
.tokenize <- wordsCN
else if (identical(.tokenize, "MC"))
.tokenize <- MC_tokenizer
else if (identical(.tokenize, "scan"))
.tokenize <- scan_tokenizer
else if (NLP::is.Span_Tokenizer(.tokenize))
.tokenize <- NLP::as.Token_Tokenizer(.tokenize)
if (is.function(.tokenize))
txt <- .tokenize(doc)
else stop("invalid tokenizer")
.tolower <- control$tolower
if (is.null(.tolower) || isTRUE(.tolower))
.tolower <- tolower
if (is.function(.tolower))
txt <- .tolower(txt)
.removePunctuation <- control$removePunctuation
if (isTRUE(.removePunctuation))
.removePunctuation <- removePunctuation
else if (is.list(.removePunctuation))
.removePunctuation <- function(x) do.call(removePunctuation,
c(list(x), control$removePunctuation))
.removeNumbers <- control$removeNumbers
if (isTRUE(.removeNumbers))
.removeNumbers <- removeNumbers
.stopwords <- control$stopwords
if (isTRUE(.stopwords))
.stopwords <- function(x) x[is.na(match(x, stopwords(meta(doc,
"language"))))]
else if (is.character(.stopwords))
.stopwords <- function(x) x[is.na(match(x, control$stopwords))]
.stemming <- control$stemming
if (isTRUE(.stemming))
.stemming <- function(x) stemDocument(x, meta(doc, "language"))
or <- c("removePunctuation", "removeNumbers", "stopwords",
"stemming")
nc <- names(control)
n <- nc[nc %in% or]
for (name in sprintf(".%s", c(n, setdiff(or, n)))) {
g <- get(name)
if (is.function(g))
txt <- g(txt)
}
if (is.null(txt))
return(setNames(integer(0), character(0)))
dictionary <- control$dictionary
tab <- if (is.null(dictionary))
table(txt)
else table(factor(txt, levels = dictionary))
if (names(tab[1])=="") tab <- tab[-1]
bl <- control$bounds$local
if (length(bl) == 2L && is.numeric(bl))
tab <- tab[(tab >= bl[1]) & (tab <= bl[2])]
nc <- nchar(names(tab), type = "chars")
wl <- control$wordLengths
lb <- if (is.numeric(wl[1])) wl[1] else 3
ub <- if (is.numeric(wl[2])) wl[2] else Inf
tab <- tab[(nc >= lb) & (nc <= ub)]
storage.mode(tab) <- "integer"
class(tab) <- c("term_frequency", class(tab))
tab
}
## Useful for TermDocumentMatrix
TermDocumentMatrix_classes <-
c("TermDocumentMatrix", "simple_triplet_matrix")
## Useful for TermDocumentMatrix
.TermDocumentMatrix <-
function(x, weighting)
{
x <- as.simple_triplet_matrix(x)
if(!is.null(dimnames(x)))
names(dimnames(x)) <- c("Terms", "Docs")
class(x) <- TermDocumentMatrix_classes
## <NOTE>
## Note that if weighting is a weight function, it already needs to
## know whether we have a term-document or document-term matrix.
##
## Ideally we would require weighting to be a WeightFunction object
## or a character string of length 2.  But then
##   dtm <- DocumentTermMatrix(crude,
##                             control = list(weighting =
##                                            function(x)
##                                            weightTfIdf(x, normalize =
##                                                        FALSE),
##                                            stopwords = TRUE))
## in example("DocumentTermMatrix") fails [because weightTfIdf() is
## a weight function and not a weight function generator ...]
## Hence, for now, instead of
##   if(inherits(weighting, "WeightFunction"))
##      x <- weighting(x)
## use
if(is.function(weighting))
x <- weighting(x)
## and hope for the best ...
## </NOTE>
else if(is.character(weighting) && (length(weighting) == 2L))
attr(x, "weighting") <- weighting
else
stop("invalid weighting")
x
}
##  Modified command "TermDocumentMatrix" on package tm
##  and defined "TermDocumentMatrixCN"
TermDocumentMatrixCN<-
function (x, control = list())
{
stopifnot(is.list(control))
tflist <- lapply(unname(content(x)), termFreqCN, control)
tflist <- lapply(tflist, function(y) y[y > 0])
v <- unlist(tflist)
i <- names(v)
allTerms <- sort(unique(as.character(if (is.null(control$dictionary)) i else control$dictionary)))
i <- match(i, allTerms)
j <- rep(seq_along(x), sapply(tflist, length))
docs <- as.character(meta(x, "id", "local"))
if (length(docs) != length(x)) {
warning("invalid document identifiers")
docs <- NULL
}
m <- simple_triplet_matrix(i = i, j = j, v = as.numeric(v),
nrow = length(allTerms), ncol = length(x), dimnames = list(Terms = allTerms,
Docs = docs))
bg <- control$bounds$global
if (length(bg) == 2L && is.numeric(bg)) {
rs <- row_sums(m > 0)
m <- m[(rs >= bg[1]) & (rs <= bg[2]), ]
}
weighting <- control$weighting
if (is.null(weighting))
weighting <- weightTf
.TermDocumentMatrix(m, weighting)
}
######################################################################
library("XML")
library("tm")
xmlfile <- xmlTreeParse("query-train.xml")
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
plantcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plantcat_df <- data.frame(t(plantcat),row.names=NULL)
plantcat_df[1:5,1:4]
summary(plantcat_df)
docs <- Corpus(VectorSource(plantcat_df))
tdm <- TermDocumentMatrixCN(docs)
tdm
summary(tdm)
inspect(tdm)
plantcat_df[1:5,1:4]
docs <- Corpus(VectorSource(plantcat_df))
tdm <- TermDocumentMatrixCN(docs)
inspect(tdm)
plantcat_df
plantcat_df[,2:5]
plantcat_df[1,2:5]
plantcat_df[1,2:5]
docs <- Corpus(VectorSource(plantcat_df[1,2:5]))
tdm <- TermDocumentMatrixCN(docs)
inspect(tdm)
plantcat_df[1,2:5]
inspect(tdm)
library("tmcn")
d.corpus <- Corpus(VectorSource(plantcat_df[1,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(docs)
inspect(tdm)
d.corpus
words <- toTrad(words)
d.corpus <- toTrad(d.corpus)
d.corpus <- tm_map(d.corpus[1:100], segmentCN, nature = TRUE)
d.corpus <- tm_map(d.corpus, function(sentence) {
noun <- lapply(sentence, function(w) {
w[names(w) == "n"]
})
unlist(noun)
})
d.corpus <- Corpus(VectorSource(d.corpus))
tdm <- TermDocumentMatrixCN(docs,control = list(wordLengths = c(1, 2))
)
inspect(tdm)
plantcat_df[1,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[1,2:5]))
# d.corpus <- tm_map(d.corpus, removePunctuation)
# d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(docs,control = list(wordLengths = c(1, 2)))
inspect(tdm)
plantcat_df[1,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[1,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(docs,control = list(wordLengths = c(1, 2)))
inspect(tdm)
plantcat_df[2,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[1,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(docs,control = list(wordLengths = c(1, 2)))
inspect(tdm)
tdm
tdm
tdm$
1
tdm$i
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
plantcat_df[2,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[2,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
tdm
data.frame(tdm)
data.frame(inspect(tdm))
temp <- data.frame(inspect(tdm))
View(temp)
temp.colname
c(temp.columns.values)
c(temp.rows.values)
temp
c(temp.row_names())
c(temp.rownames())
c(rownames(temp))
temp
cbind(rownames(temp),rowsum(temp))
rowsum(temp)
temp
rowsum(temp)
rowsum(as.matrix(temp))
as.matrix(temp)
temp <- as.matrix(inspect(tdm))
rownames(temp)
rowsum(temp)
cbind(rownames(temp),roSums(temp))
cbind(rownames(temp),rowSums(temp))
s_clean_query <- cbind(rownames(temp),rowSums(temp))
rownames(s_clean_query) <- rownames(s_clean_query, do.NULL = FALSE, prefix = "Obs.")
s_clean_query
rownames(s_clean_query, do.NULL = FALSE, prefix = "Obs.")
rownames(s_clean_query) <- rownames(s_clean_query, do.NULL = TRUE, prefix = "Obs.")
s_clean_query
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query), prefix = "Obs.")
s_clean_query
plantcat_df[3,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[2,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
temp <- as.matrix(inspect(tdm))
s_clean_query <- cbind(rownames(temp),rowSums(temp))
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query), prefix = "Obs.")
# http://rstudio-pubs-static.s3.amazonaws.com/12422_b2b48bb2da7942acaca5ace45bd8c60c.html
plantcat_df[3,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[2,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
temp <- as.matrix(inspect(tdm))
s_clean_query <- cbind(rownames(temp),rowSums(temp))
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query), prefix = "Obs.")
s_clean_query
# http://rstudio-pubs-static.s3.amazonaws.com/12422_b2b48bb2da7942acaca5ace45bd8c60c.html
plantcat_df[4,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[2,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
temp <- as.matrix(inspect(tdm))
s_clean_query <- cbind(rownames(temp),rowSums(temp))
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query), prefix = "Obs.")
s_clean_query
# http://rstudio-pubs-static.s3.amazonaws.com/12422_b2b48bb2da7942acaca5ace45bd8c60c.html
print(xmltop)[1:2]
summary(plantcat_df)
plantcat_df[1:5,1:4]
print(xmltop)[1:2]
summary(plantcat_df)
plantcat_df[4,2:5]
d.corpus <- Corpus(VectorSource(plantcat_df[2,2:5]))
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
tdm <- TermDocumentMatrixCN(d.corpus,control = list(wordLengths = c(1, 2)))
inspect(tdm)
s_clean_query <- cbind(rownames(temp),rowSums(temp))
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query), prefix = "Obs.")
s_clean_query
rownames(s_clean_query) <- rownames(1:nrow(s_clean_query))
s_clean_query
